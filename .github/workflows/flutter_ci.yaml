name: Flutter CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_platforms:
        description: 'Select platforms to build'
        required: true
        default: 'android,ios,macos,windows'
        type: choice
        options:
          - 'android'
          - 'ios'
          - 'macos'
          - 'windows'
          - 'android,ios'
          - 'android,macos'
          - 'android,windows'
          - 'ios,macos'
          - 'ios,windows'
          - 'macos,windows'
          - 'android,ios,macos'
          - 'android,ios,windows'
          - 'android,macos,windows'
          - 'ios,macos,windows'
          - 'android,ios,macos,windows'

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  # Test and analyze code quality
  test:
    name: Test & Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info

  # Android Build
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.event.inputs.build_platforms || 'android,ios,macos,windows', 'android')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Build App Bundle
        run: flutter build appbundle --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab

  # iOS Build with xarchive
  build-ios:
    name: Build iOS
    runs-on: macos-14
    needs: test
    if: contains(github.event.inputs.build_platforms || 'android,ios,macos,windows', 'ios')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Create xarchive
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ipa \
            -exportOptionsPlist exportOptions.plist

      - name: Upload xarchive
        uses: actions/upload-artifact@v4
        with:
          name: ios-xarchive
          path: ios/build/Runner.xcarchive

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/ipa/*.ipa

  # macOS Build
  build-macos:
    name: Build macOS
    runs-on: macos-14
    needs: test
    if: contains(github.event.inputs.build_platforms || 'android,ios,macos,windows', 'macos')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop

      - name: Get dependencies
        run: flutter pub get

      - name: Build macOS app
        run: flutter build macos --release

      - name: Create DMG (optional)
        run: |
          # Install create-dmg if you want to create a DMG
          # brew install create-dmg
          # create-dmg --window-size 800 600 --icon-size 100 --icon "YourApp.app" 200 190 --hide-extension "YourApp.app" --app-drop-link 600 185 "YourApp.dmg" "build/macos/Build/Products/Release/"

      - name: Upload macOS app
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: build/macos/Build/Products/Release/

  # Windows Build
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: contains(github.event.inputs.build_platforms || 'android,ios,macos,windows', 'windows')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows app
        run: flutter build windows --release

      - name: Create installer (optional)
        run: |
          # You can use tools like Inno Setup or WiX to create installers
          # Example with Inno Setup:
          # iscc windows_installer_script.iss

      - name: Upload Windows app
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: build/windows/x64/runner/Release/

  # Deploy job (optional)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-macos, build-windows]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Deploy to Firebase App Distribution (Android)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: android-apk/app-release.apk

      - name: Deploy to TestFlight (iOS)
        # You would need to set up App Store Connect API for this
        run: |
          echo "Deploy to TestFlight"
          # xcrun altool --upload-app --type ios --file ios-ipa/*.ipa --username "${{ secrets.APP_STORE_CONNECT_USERNAME }}" --password "${{ secrets.APP_STORE_CONNECT_PASSWORD }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            android-apk/app-release.apk
            android-aab/app-release.aab
            ios-ipa/*.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}